#  62. Unique Paths
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        return path(m-1,n-1,dp);


    }
    public int path(int r,int c, int dp[][]){
        if(r==0 || c ==0){
            return 1;
        }
        if(dp[r][c]!=0){
            return dp[r][c];
        }
        dp[r][c] = path(r-1,c,dp)+ path(r,c-1,dp);
        return dp[r][c];
    }
}

# 53. Maximum Subarray
class Solution {
    public int maxSubArray(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int maxSum = dp[0];

        for (int i = 1; i < nums.length; i++) {
            dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);
            maxSum = Math.max(maxSum, dp[i]);
        }

        return maxSum;
    }
}

# 198. House Robber

class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        if (n == 1) return nums[0];
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]);
        }
        return dp[n-1];
    }
}



