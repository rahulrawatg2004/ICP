#  88. Merge Sorted Array
public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;         
        int j = n - 1;         
        int k = m + n - 1;     
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    

    }

#  findKthLargest
public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
        for(int i=0;i<nums.length;i++){
            maxHeap.add(nums[i]);
        }
    
        while(k>1){
          maxHeap.poll();
          k--;
        }
 
        return maxHeap.poll();
    }

# isPerfectSquare
 public boolean isPerfectSquare(int num) {
             if (num < 2) return true;

        long left = 1, right = num / 2;

        while (left <= right) {
            long mid = left + (right - left) / 2;
            long square = mid * mid;

            if (square == num) {
                return true;
            } else if (square < num) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return false;

    }
