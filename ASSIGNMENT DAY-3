# 1.	Search a 2D Matrix
 public boolean searchMatrix(int[][] matrix, int target) {
        int r = matrix.length;
        int c = matrix[0].length;
        if(target<matrix[0][0]){
            return false;
        }
        int row = -1;
        if(r==1){
            row = 0;
        }
        else{
        for(int i=0;i<r;i++){
            if(target==matrix[i][0]){
                return true;
            }
            if(target<matrix[i][0]){
                row = i-1;
                break;
            }
        }
        if(row==-1){
          row = r-1;
        }
    }

        int column = binarySearch(matrix,row,target);
        if(column==-1) {
            return false;
        }
        else{
             return true;
        }
    }

# 2.	Spiral Matrix
public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> ans = new ArrayList<>();
        int startrow = 0;
        int startcol = 0;
        int endrow = matrix.length-1;
        int endcol = matrix[0].length-1;
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
    return new ArrayList<>();
}
        while(startrow<=endrow && startcol<=endcol){
            for(int j=startcol;j<=endcol;j++){
                ans.add(matrix[startrow][j]);
            }
            for(int i=startrow+1;i<=endrow;i++){
                ans.add(matrix[i][endcol]);
            }
            for(int j=endcol-1;j>=startcol;j--){
                if(startrow==endrow){
                    break;
                }
                ans.add(matrix[endrow][j]);
            }
            for(int i=endrow-1;i>=startrow+1;i--){
                if(startcol==endcol){
                    break;
                }
                ans.add(matrix[i][startcol]);
            }
            startcol++;
            startrow++;
            endcol--;
            endrow--;
        }
        return ans;
    }

# Number of islands

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;

        int count = 0;
        int rows = grid.length;
        int cols = grid[0].length;

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == '1') {
                    count++;
                    dfs(grid, r, c);
                }
            }
        }

        return count;
    }

    private void dfs(char[][] grid, int r, int c) {
        int rows = grid.length;
        int cols = grid[0].length;
        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0') {
            return;
        }
        grid[r][c] = '0';
        dfs(grid, r + 1, c); // down
        dfs(grid, r - 1, c); // up
        dfs(grid, r, c + 1); // right
        dfs(grid, r, c - 1); // left
    
    }
}
